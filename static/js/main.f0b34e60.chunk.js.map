{"version":3,"sources":["sortingAlgorithms/mergeSortAlgorithm.js","sortingAlgorithms/quickSortAlgorithm.js","SortingVisualizer/Footer.jsx","SortingVisualizer/SortingVisualizer.jsx","sortingAlgorithms/bubbleSortAlgorithm.js","sortingAlgorithms/insertionSortAlgorithm.js","sortingAlgorithms/selectionSortAlgorithm.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","arr","animations","array","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","quickSortHelper","low","high","pi","temp","pivot","partition","Footer","year","Date","getFullYear","style","bottom","left","right","textAlign","width","href","ANIMATION_SPEED_MS","dict","counter","SortingVisualizer","props","state","buttonClicked","bars","window","innerWidth","maxHeight","innerHeight","console","log","this","setState","bruteReset","resetArray","addEventListener","updateDimensions","bind","removeEventListener","min","max","random","id","tim","cnt","arrayBars","document","getElementsByClassName","Boolean","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","backgroundColor","newHeightOne","newHeightTwo","height","sorted_arr","sort","a","b","processAlgorithm","bubbleSortHelper","getBubbleSortAnimations","key","n","InsertionSortHelper","getInsertionSortAnimations","min_idx","selectionSortHelper","getSelectionSortAnimations","clearTimeout","className","type","minWidth","opacity","onClick","mergeSort","fontSize","quickSort","bubbleSort","insertionSort","selectionSort","map","value","idx","React","Component","App","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0b34e60.chunk.js","sourcesContent":["export function getMergeSortAnimations(arr) {\n  const animations = [];\n  let array = arr;\n  if (array.length <= 1) return animations;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animations.push([k, auxiliaryArray[i], k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animations.push([k, auxiliaryArray[j], k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, auxiliaryArray[i], k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, auxiliaryArray[j], k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n","// int partition (int arr[], int low, int high)\n// {\n//     int pivot = arr[high]; // pivot\n//     int i = (low - 1); // Index of smaller element and indicates the right position of pivot found so far\n\n//     for (int j = low; j <= high - 1; j++)\n//     {\n//         // If current element is smaller than the pivot\n//         if (arr[j] < pivot)\n//         {\n//             i++; // increment index of smaller element\n//             swap(&arr[i], &arr[j]);\n//         }\n//     }\n//     swap(&arr[i + 1], &arr[high]);\n//     return (i + 1);\n// }\n\n// /* The main function that implements QuickSort\n// arr[] --> Array to be sorted,\n// low --> Starting index,\n// high --> Ending index */\n// void quickSort(int arr[], int low, int high)\n// {\n//     if (low < high)\n//     {\n//         /* pi is partitioning index, arr[p] is now\n//         at right place */\n//         int pi = partition(arr, low, high);\n\n//         // Separately sort elements before\n//         // partition and after partition\n//         quickSort(arr, low, pi - 1);\n//         quickSort(arr, pi + 1, high);\n//     }\n// }\n\nexport function getQuickSortAnimations(arr) {\n  const animations = [];\n  if (arr.length <= 1) return animations;\n  quickSortHelper(arr, 0, arr.length - 1, animations);\n  return animations;\n}\n\nfunction quickSortHelper(arr, low, high, animations) {\n  if (low < high) {\n    /* pi is partitioning index, arr[p] is now\n        at right place */\n\n    var pi = partition(arr, low, high, animations);\n\n    // Separately sort elements before\n    // partition and after partition\n    quickSortHelper(arr, low, pi - 1, animations);\n    quickSortHelper(arr, pi + 1, high, animations);\n  }\n}\n\nfunction partition(arr, low, high, animations) {\n  var pivot = arr[high]; // pivot\n  var i = low - 1; // Index of smaller element and indicates the right position of pivot found so far\n  var temp;\n\n  for (var j = low; j <= high - 1; j++) {\n    // If current element is smaller than the pivot\n    animations.push([j, high]);\n    animations.push([j, high]);\n\n    if (arr[j] < pivot) {\n      i++; // increment index of smaller element\n      animations.push([i, arr[j], j, arr[i]]);\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n  }\n\n  animations.push([i + 1, arr[high], high, arr[i + 1]]);\n  temp = arr[i + 1];\n  arr[i + 1] = arr[high];\n  arr[high] = temp;\n  return i + 1;\n}\n","import React from \"react\";\nimport \"./SortingVisualizer.css\";\n\nfunction Footer() {\n  const year = new Date().getFullYear();\n  return (\n    <div>\n      <p\n        style={{\n          // position: \"absolute\",\n          bottom: \"0px\",\n          left: \"0px\",\n          right: \"0px\",\n          textAlign: \"center\",\n          width: \"100%\",\n        }}\n      >\n        {\" \"}\n        Sorting Visualiser | Copyright ⓒ {year} |\n        <a href={\"https://forms.gle/sGiTmc9SdRcML5Ug7\"}>\n          {\" \"}\n          Please leave a feedback\n        </a>\n      </p>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport { getMergeSortAnimations } from \"../sortingAlgorithms/mergeSortAlgorithm.js\";\nimport { getBubbleSortAnimations } from \"../sortingAlgorithms/bubbleSortAlgorithm.js\";\nimport { getInsertionSortAnimations } from \"../sortingAlgorithms/insertionSortAlgorithm.js\";\nimport { getQuickSortAnimations } from \"../sortingAlgorithms/quickSortAlgorithm.js\";\nimport { getSelectionSortAnimations } from \"../sortingAlgorithms/selectionSortAlgorithm.js\";\nimport \"./SortingVisualizer.css\";\nimport Footer from \"./Footer.jsx\";\n\n// Change this value for the speed of the animations.\nvar ANIMATION_SPEED_MS = 10;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = \"turquoise\";\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = \"red\";\n\nvar dict = {\n  generate: 1,\n  merge: 2,\n  quick: 3,\n  bubble: 4,\n  insertion: 5,\n  selection: 6,\n  reset: 7,\n};\n\nlet counter = 0;\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      buttonClicked: 0,\n      bars: (window.innerWidth - 20) / 5,\n      maxHeight: window.innerHeight - 100,\n    };\n\n    // this.timer = this.timer.bind(this);\n  }\n\n  updateDimensions() {\n    console.log(\"Updated\");\n\n    this.setState({\n      bars: (window.innerWidth - 20) / 5,\n      maxHeight: window.innerHeight - 100,\n    });\n\n    console.log(\"Window Width\", window.innerWidth);\n    console.log(\"Window Height\", window.innerHeight);\n\n    console.log(\"Bars\", this.state.bars);\n    console.log(\"Bar Height\", this.state.maxHeight);\n    if (this.state.buttonClicked !== 0) {\n      this.bruteReset();\n    } else {\n      this.resetArray();\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n    this.updateDimensions();\n    console.log(\"Resetting Array\");\n    console.log(\"Bars\", this.state.bars);\n    console.log(\"Bar Height\", this.state.maxHeight);\n    this.resetArray();\n    this.setState({ buttonClicked: 0 });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n\n  resetArray() {\n    if (this.state.buttonClicked !== 0) return;\n    this.setState({ buttonClicked: 1 });\n    const arr = [];\n    for (let i = 0; i < this.state.bars; i++) {\n      arr.push(randomIntFromInterval(5, this.state.maxHeight));\n    }\n    console.log(arr);\n    this.setState({ array: arr });\n    console.log(\"Inside reset array \", this.state.array);\n    this.setState({ buttonClicked: 0 });\n  }\n\n  processAlgorithm(animations, id) {\n    ANIMATION_SPEED_MS = 10000 / (animations.length + 1);\n\n    this.setState({ buttonClicked: id });\n    console.log(\"SET TO TRUE\");\n    var tim = 0;\n    var cnt = 0;\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = Boolean(animations[i].length === 2);\n      if (isColorChange) {\n        cnt++;\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = cnt % 2 === 1 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        tim = i * ANIMATION_SPEED_MS;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        tim = i * ANIMATION_SPEED_MS;\n        setTimeout(() => {\n          const [barOneIdx, newHeightOne, barTwoIdx, newHeightTwo] = animations[\n            i\n          ];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeightOne}px`;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          barTwoStyle.height = `${newHeightTwo}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n    setTimeout(() => {\n      var sorted_arr = [...this.state.array].sort(function (a, b) {\n        return a - b;\n      });\n      this.setState({ array: sorted_arr });\n      this.setState({ buttonClicked: 0 });\n      console.log(\"SET TO FALSE\");\n    }, tim);\n  }\n\n  mergeSort() {\n    if (this.state.buttonClicked !== 0) return;\n    const animations = getMergeSortAnimations([...this.state.array]);\n    this.processAlgorithm(animations, dict[\"merge\"]);\n  }\n\n  quickSort() {\n    if (this.state.buttonClicked !== 0) return;\n    const animations = getQuickSortAnimations([...this.state.array]);\n    this.processAlgorithm(animations, dict[\"quick\"]);\n  }\n\n  bubbleSort() {\n    // console.log(\"Inside Bubble Sort\");\n    if (this.state.buttonClicked !== 0) return;\n    const animations = getBubbleSortAnimations([...this.state.array]);\n    this.processAlgorithm(animations, dict[\"bubble\"]);\n  }\n\n  insertionSort() {\n    // console.log(\"Inside Insertion Sort\");\n    if (this.state.buttonClicked !== 0) return;\n    const animations = getInsertionSortAnimations([...this.state.array]);\n    this.processAlgorithm(animations, dict[\"insertion\"]);\n  }\n\n  selectionSort() {\n    if (this.state.buttonClicked !== 0) return;\n    const animations = getSelectionSortAnimations([...this.state.array]);\n    this.processAlgorithm(animations, dict[\"selection\"]);\n  }\n\n  bruteReset() {\n    console.log(\"Reset button clicked\");\n    var id = window.setTimeout(function () {}, 0);\n\n    while (id--) {\n      window.clearTimeout(id);\n    }\n\n    this.setState({\n      array: [],\n      buttonClicked: 0,\n      bars: (window.innerWidth - 20) / 5,\n      maxHeight: window.innerHeight - 100,\n    });\n\n    console.log(\n      \"Deleted\",\n      this.state.bars,\n      this.state.maxHeight,\n      this.state.buttonClicked,\n      this.state.array\n    );\n\n    setTimeout(() => {\n      counter++;\n      if (counter % 2 === 1) {\n        this.bruteReset();\n      }\n    });\n    this.resetArray();\n    console.log(this.state.array);\n    // window.location.reload();\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"up buttons\">\n          <div className=\"text-center\">\n            <button\n              type=\"submit\"\n              className=\"form-control btn btn-link col-sm-1\"\n              style={{\n                minWidth: \"18ch\",\n                opacity:\n                  this.state.buttonClicked === 0 ||\n                  this.state.buttonClicked === dict[\"generate\"]\n                    ? 1\n                    : 0.2,\n                color: \"black\",\n              }}\n              onClick={() => this.resetArray()}\n            >\n              Generate New Array\n            </button>\n            <button\n              type=\"submit\"\n              className=\"form-control btn btn-link col-sm-1\"\n              style={{\n                minWidth: \"18ch\",\n                opacity:\n                  this.state.buttonClicked === 0 ||\n                  this.state.buttonClicked === dict[\"merge\"]\n                    ? 1\n                    : 0.2,\n                color: \"black\",\n              }}\n              onClick={() => this.mergeSort()}\n            >\n              Merge Sort\n            </button>\n            <button\n              type=\"submit\"\n              className=\"form-control btn btn-link col-sm-1\"\n              style={{\n                minWidth: \"18ch\",\n                fontSize: \"15px\",\n                opacity:\n                  this.state.buttonClicked === 0 ||\n                  this.state.buttonClicked === dict[\"quick\"]\n                    ? 1\n                    : 0.2,\n                color: \"black\",\n              }}\n              onClick={() => this.quickSort()}\n            >\n              Quick Sort\n            </button>\n            <button\n              type=\"submit\"\n              className=\"form-control btn btn-link col-sm-1\"\n              style={{\n                minWidth: \"18ch\",\n                opacity:\n                  this.state.buttonClicked === 0 ||\n                  this.state.buttonClicked === dict[\"bubble\"]\n                    ? 1\n                    : 0.2,\n                color: \"black\",\n              }}\n              onClick={() => this.bubbleSort()}\n            >\n              Bubble Sort\n            </button>\n            <button\n              type=\"submit\"\n              className=\"form-control btn btn-link col-sm-1\"\n              style={{\n                minWidth: \"18ch\",\n\n                opacity:\n                  this.state.buttonClicked === 0 ||\n                  this.state.buttonClicked === dict[\"insertion\"]\n                    ? 1\n                    : 0.2,\n                color: \"black\",\n              }}\n              onClick={() => this.insertionSort()}\n            >\n              Insertion Sort\n            </button>\n            <button\n              type=\"submit\"\n              className=\"form-control btn btn-link col-sm-1\"\n              style={{\n                minWidth: \"18ch\",\n                opacity:\n                  this.state.buttonClicked === 0 ||\n                  this.state.buttonClicked === dict[\"selection\"]\n                    ? 1\n                    : 0.2,\n                color: \"black\",\n              }}\n              onClick={() => this.selectionSort()}\n            >\n              Selection Sort\n            </button>\n            <button\n              type=\"submit\"\n              className=\"form-control btn btn-link col-sm-1\"\n              style={{\n                minWidth: \"18ch\",\n                color: \"red\",\n              }}\n              onClick={() => this.bruteReset()}\n            >\n              Reset\n            </button>\n          </div>\n        </div>\n        <div className=\"array-container\">\n          {this.state.array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n              }}\n            ></div>\n          ))}\n        </div>\n        <Footer className=\"container\" />\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","export function getBubbleSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return animations;\n  bubbleSortHelper(array, animations);\n  return animations;\n}\n\nfunction bubbleSortHelper(arr, animations) {\n  for (var i = 0; i < arr.length; i++) {\n    for (var j = i + 1; j < arr.length; j++) {\n      animations.push([i, j]);\n      animations.push([i, j]);\n      if (arr[j] < arr[i]) {\n        animations.push([i, arr[j], j, arr[j]]);\n        var temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n    }\n  }\n}\n","// void insertionSort(int arr[], int n)\n// {\n//     int i, key, j;\n//     for (i = 1; i < n; i++)\n//     {\n//         key = arr[i];\n//         j = i - 1;\n\n//         /* Move elements of arr[0..i-1], that are\n//         greater than key, to one position ahead\n//         of their current position */\n//         while (j >= 0 && arr[j] > key)\n//         {\n//             arr[j + 1] = arr[j];\n//             j = j - 1;\n//         }\n//         arr[j + 1] = key;\n//     }\n// }\n\nexport function getInsertionSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return animations;\n  InsertionSortHelper(array, animations);\n  return animations;\n}\n\nfunction InsertionSortHelper(arr, animations) {\n  var i, key, j;\n  var n = arr.length;\n  for (i = 1; i < n; i++) {\n    key = arr[i];\n    j = i - 1;\n\n    /* Move elements of arr[0..i-1], that are\n        greater than key, to one position ahead\n        of their current position */\n    animations.push([i, j]);\n    animations.push([i, j]);\n    while (j >= 0 && arr[j] > key) {\n      animations.push([j + 1, arr[j], j + 1, arr[j]]);\n      arr[j + 1] = arr[j];\n      j = j - 1;\n      if (j >= 0) {\n        animations.push([i, j]);\n        animations.push([i, j]);\n      }\n    }\n    animations.push([j + 1, key, j + 1, key]);\n    arr[j + 1] = key;\n  }\n}\n","// void selectionSort(int arr[], int n)\n// {\n//     int i, j, min_idx;\n\n//     // One by one move boundary of unsorted subarray\n//     for (i = 0; i < n-1; i++)\n//     {\n//         // Find the minimum element in unsorted array\n//         min_idx = i;\n//         for (j = i+1; j < n; j++)\n//         if (arr[j] < arr[min_idx])\n//             min_idx = j;\n\n//         // Swap the found minimum element with the first element\n//         swap(&arr[min_idx], &arr[i]);\n//     }\n// }\n\nexport function getSelectionSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return animations;\n  selectionSortHelper(array, animations);\n  return animations;\n}\n\nfunction selectionSortHelper(arr, animations) {\n  var i, j, min_idx;\n  var n = arr.length;\n  // One by one move boundary of unsorted subarray\n  for (i = 0; i < n - 1; i++) {\n    // Find the minimum element in unsorted array\n    min_idx = i;\n    for (j = i + 1; j < n; j++) {\n      animations.push([j, min_idx]);\n      animations.push([j, min_idx]);\n      if (arr[j] < arr[min_idx]) min_idx = j;\n    }\n\n    animations.push([i, arr[min_idx], min_idx, arr[i]]);\n\n    // Swap the found minimum element with the first element\n    var temp = arr[i];\n    arr[i] = arr[min_idx];\n    arr[min_idx] = temp;\n  }\n}\n","import React from \"react\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}